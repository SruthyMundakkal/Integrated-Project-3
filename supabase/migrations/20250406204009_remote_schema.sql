

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE SCHEMA IF NOT EXISTS "tests";


ALTER SCHEMA "tests" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgtap" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."get_claim_category_totals_last_6_months"() RETURNS TABLE("category_id" "uuid", "category_name" "text", "total_amount" numeric)
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    c.category_id,
    cat.name AS category_name,
    SUM(c.amount) AS total_amount
  FROM
    public.claims c
  JOIN
    public.categories cat ON c.category_id = cat.id
  WHERE
    c.submitted_on >= CAST(now() - interval '6 months' AS timestamp without time zone)
  GROUP BY
    c.category_id, cat.name
  ORDER BY
    cat.name;
END;
$$;


ALTER FUNCTION "public"."get_claim_category_totals_last_6_months"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_claim_category_totals_last_6_months"("p_employee_id" "uuid" DEFAULT NULL::"uuid") RETURNS TABLE("category_id" "uuid", "category_name" "text", "total_amount" numeric)
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  RETURN QUERY
  SELECT
    c.category_id,
    cat.name AS category_name,
    SUM(c.amount) AS total_amount
  FROM
    public.claims c
  JOIN
    public.categories cat ON c.category_id = cat.id
  WHERE
    c.submitted_on >= CAST(now() - interval '6 months' AS timestamp without time zone)
    AND (p_employee_id IS NULL OR c.employee_id = p_employee_id)
  GROUP BY
    c.category_id, cat.name
  ORDER BY
    cat.name;
END;
$$;


ALTER FUNCTION "public"."get_claim_category_totals_last_6_months"("p_employee_id" "uuid") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_my_role"() RETURNS "text"
    LANGUAGE "sql" STABLE SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
  SELECT role
  FROM public.profiles
  WHERE id = auth.uid(); -- auth.uid() gets the UUID of the logged-in user
$$;


ALTER FUNCTION "public"."get_my_role"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "tests"."test_minimal"() RETURNS SETOF "text"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- Plan for exactly one test
  RETURN NEXT plan(1);
  -- The simplest pass assertion
  RETURN NEXT pass('Minimal test executed');
END;
$$;


ALTER FUNCTION "tests"."test_minimal"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE ONLY "public"."categories" FORCE ROW LEVEL SECURITY;


ALTER TABLE "public"."categories" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."claims" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "employee_id" "uuid" NOT NULL,
    "amount" numeric NOT NULL,
    "submitted_on" timestamp without time zone DEFAULT "now"() NOT NULL,
    "reviewed_on" timestamp without time zone DEFAULT "now"(),
    "category_id" "uuid",
    "status" "text" DEFAULT 'pending'::"text" NOT NULL,
    "reviewed_by" "uuid",
    "start_location" "text",
    "end_location" "text",
    "mileage" numeric,
    "receipt_url" "text",
    "submitted_by" "uuid",
    CONSTRAINT "claims_mileage_check" CHECK ((("mileage" IS NULL) OR ("mileage" >= (0)::numeric))),
    CONSTRAINT "claims_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'approved'::"text", 'denied'::"text"])))
);

ALTER TABLE ONLY "public"."claims" FORCE ROW LEVEL SECURITY;


ALTER TABLE "public"."claims" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "email" character varying NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text",
    "role" "text" DEFAULT 'employee'::"text" NOT NULL,
    CONSTRAINT "valid_role" CHECK (("role" = ANY (ARRAY['superadmin'::"text", 'admin'::"text", 'employee'::"text"])))
);

ALTER TABLE ONLY "public"."profiles" FORCE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."claims"
    ADD CONSTRAINT "claims_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_claims_employee_status" ON "public"."claims" USING "btree" ("employee_id", "status");



CREATE INDEX "idx_claims_status" ON "public"."claims" USING "btree" ("status");



ALTER TABLE ONLY "public"."claims"
    ADD CONSTRAINT "claims_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."claims"
    ADD CONSTRAINT "claims_employee_id_fkey" FOREIGN KEY ("employee_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."claims"
    ADD CONSTRAINT "claims_reviewed_by_fkey" FOREIGN KEY ("reviewed_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."claims"
    ADD CONSTRAINT "claims_submitted_by_fkey" FOREIGN KEY ("submitted_by") REFERENCES "public"."profiles"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow admins to update employee profiles" ON "public"."profiles" FOR UPDATE USING ((("public"."get_my_role"() = 'admin'::"text") AND ("role" = 'employee'::"text"))) WITH CHECK ((("public"."get_my_role"() = 'admin'::"text") AND ("role" = 'employee'::"text")));



CREATE POLICY "Allow admins to view employee profiles" ON "public"."profiles" FOR SELECT USING ((("public"."get_my_role"() = 'admin'::"text") AND ("role" = 'employee'::"text")));



CREATE POLICY "Allow admins/superadmins to delete employee/admin profiles" ON "public"."profiles" FOR DELETE USING (((("public"."get_my_role"() = 'superadmin'::"text") AND ("role" = ANY (ARRAY['admin'::"text", 'employee'::"text"]))) OR (("public"."get_my_role"() = 'admin'::"text") AND ("role" = 'employee'::"text"))));



CREATE POLICY "Allow admins/superadmins to insert claims for employees" ON "public"."claims" FOR INSERT WITH CHECK ((("public"."get_my_role"() = ANY (ARRAY['admin'::"text", 'superadmin'::"text"])) AND ("employee_id" <> "auth"."uid"()) AND ("submitted_by" = "auth"."uid"()) AND ("status" = 'pending'::"text") AND (EXISTS ( SELECT 1
   FROM "public"."profiles" "p"
  WHERE (("p"."id" = "claims"."employee_id") AND ("p"."role" = 'employee'::"text"))))));



CREATE POLICY "Allow admins/superadmins to insert employee/admin profiles" ON "public"."profiles" FOR INSERT WITH CHECK (((("public"."get_my_role"() = 'superadmin'::"text") AND ("role" = ANY (ARRAY['admin'::"text", 'employee'::"text"]))) OR (("public"."get_my_role"() = 'admin'::"text") AND ("role" = 'employee'::"text"))));



CREATE POLICY "Allow admins/superadmins to update (approve/deny) claims" ON "public"."claims" FOR UPDATE USING (("public"."get_my_role"() = ANY (ARRAY['admin'::"text", 'superadmin'::"text"]))) WITH CHECK ((("public"."get_my_role"() = ANY (ARRAY['admin'::"text", 'superadmin'::"text"])) AND ("employee_id" = ( SELECT "c"."employee_id"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id"))) AND (NOT ("submitted_by" IS DISTINCT FROM ( SELECT "c"."submitted_by"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id")))) AND ("amount" = ( SELECT "c"."amount"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id"))) AND ("category_id" = ( SELECT "c"."category_id"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id"))) AND (NOT ("start_location" IS DISTINCT FROM ( SELECT "c"."start_location"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id")))) AND (NOT ("end_location" IS DISTINCT FROM ( SELECT "c"."end_location"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id")))) AND (NOT ("mileage" IS DISTINCT FROM ( SELECT "c"."mileage"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id")))) AND (NOT ("receipt_url" IS DISTINCT FROM ( SELECT "c"."receipt_url"
   FROM "public"."claims" "c"
  WHERE ("c"."id" = "claims"."id")))) AND (("status" = ANY (ARRAY['approved'::"text", 'denied'::"text"])) AND ("reviewed_by" = "auth"."uid"()) AND ("reviewed_on" IS NOT NULL))));



CREATE POLICY "Allow admins/superadmins to view all claims" ON "public"."claims" FOR SELECT USING (("public"."get_my_role"() = ANY (ARRAY['admin'::"text", 'superadmin'::"text"])));



CREATE POLICY "Allow authenticated users to view categories" ON "public"."categories" FOR SELECT USING (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Allow employees to insert own claims" ON "public"."claims" FOR INSERT WITH CHECK ((("employee_id" = "auth"."uid"()) AND ("submitted_by" = "auth"."uid"()) AND ("status" = 'pending'::"text")));



CREATE POLICY "Allow employees to view own claims" ON "public"."claims" FOR SELECT USING (("employee_id" = "auth"."uid"()));



CREATE POLICY "Allow superadmins to manage categories" ON "public"."categories" USING (("public"."get_my_role"() = 'superadmin'::"text")) WITH CHECK (("public"."get_my_role"() = 'superadmin'::"text"));



CREATE POLICY "Allow superadmins to update any profile" ON "public"."profiles" FOR UPDATE USING (("public"."get_my_role"() = 'superadmin'::"text")) WITH CHECK ((("public"."get_my_role"() = 'superadmin'::"text") AND ("role" = ANY (ARRAY['employee'::"text", 'admin'::"text", 'superadmin'::"text"])) AND (NOT (("role" = 'superadmin'::"text") AND ("id" <> "auth"."uid"())))));



CREATE POLICY "Allow superadmins to view all profiles" ON "public"."profiles" FOR SELECT USING (("public"."get_my_role"() = 'superadmin'::"text"));



CREATE POLICY "Allow users to update their own profile" ON "public"."profiles" FOR UPDATE USING (("id" = "auth"."uid"())) WITH CHECK ((("id" = "auth"."uid"()) AND ("role" = ( SELECT "p"."role"
   FROM "public"."profiles" "p"
  WHERE ("p"."id" = "auth"."uid"())))));



CREATE POLICY "Allow users to view their own profile" ON "public"."profiles" FOR SELECT USING (("id" = "auth"."uid"()));



CREATE POLICY "Disallow deletion of claims" ON "public"."claims" FOR DELETE USING (false);



ALTER TABLE "public"."categories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."claims" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"("p_employee_id" "uuid") TO "anon";
GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"("p_employee_id" "uuid") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_claim_category_totals_last_6_months"("p_employee_id" "uuid") TO "service_role";



GRANT ALL ON FUNCTION "public"."get_my_role"() TO "anon";
GRANT ALL ON FUNCTION "public"."get_my_role"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_my_role"() TO "service_role";


















GRANT ALL ON TABLE "public"."categories" TO "anon";
GRANT ALL ON TABLE "public"."categories" TO "authenticated";
GRANT ALL ON TABLE "public"."categories" TO "service_role";



GRANT ALL ON TABLE "public"."claims" TO "anon";
GRANT ALL ON TABLE "public"."claims" TO "authenticated";
GRANT ALL ON TABLE "public"."claims" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
